# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - master
      - release/*
      - refs/tags/*
pr:
  - master
  - release/*

jobs:
  - job: pytest
    strategy:
      matrix:
        'PyTorch - LTS':
          PyTorch: '1.8.1'
          CUDA: '10.2'
          CUDNN: '7'
          agents: 'azure-gpus-spot'
        'PyTorch - stable':
          PyTorch: '1.12.0'
          CUDA: '11.3'
          CUDNN: '8'
          agents: 'azure-jirka-spot'
      #maxParallel: '2'
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "65"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"

    pool: $(agents)

    container:
      image: "pytorch/pytorch:$(PyTorch)-cuda$(CUDA)-cudnn$(CUDNN)-runtime"
      options: "--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all --name ci-container -v /usr/bin/docker:/tmp/docker:ro"

    workspace:
      clean: all

    steps:

    - bash: |
        whoami
        id
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        python --version
        pip --version
        pip list
        python -c "import torch ; print(torch.cuda.get_arch_list())"
      displayName: 'Image info & NVIDIA'

    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        set -ex
        sudo apt-get update -qq --fix-missing
        sudo apt-get install -y build-essential gcc g++ cmake ffmpeg git libsndfile1 unzip --no-install-recommends
        # python -m pip install "pip==20.1"
        pip install -e . --requirement ./requirements/devel.txt
        pip install mkl-service==2.4.0  # needed for the gpu multiprocessing
        pip list
      displayName: 'Install environment'

    - bash: |
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
      displayName: 'Sanity check'

    - bash: python -m pytest torchmetrics --cov=torchmetrics --timeout=120 --durations=50
      workingDirectory: src
      displayName: 'DocTesting'

    - bash: |
        # wget is simpler but does not work on Windows
        python -c "from urllib.request import urlretrieve ; urlretrieve('https://pl-public-data.s3.amazonaws.com/metrics/data.zip', 'data.zip')"
        unzip -o data.zip
        ls -l _data/*
      workingDirectory: tests
      displayName: 'Pull testing data from S3'

    - bash: |
        python -m pytest unittests -v --cov=torchmetrics --junitxml=$(Build.StagingDirectory)/test-results.xml --timeout=180 --durations=50
      env:
        CUDA_LAUNCH_BLOCKING: 1
      workingDirectory: tests
      displayName: 'UnitTesting'

    - bash: |
        python -m coverage report
        python -m coverage xml
        python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) --flags=gpu,unittest --name="GPU-coverage" --env=linux,azure
        ls -l
      workingDirectory: tests
      displayName: 'Statistics'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/test-results.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()

    # todo: re-enable after schema check pass, also atm it seems does not have any effect
    #- task: PublishCodeCoverageResults@1
    #  displayName: 'Publish coverage report'
    #  inputs:
    #    codeCoverageTool: 'Cobertura'
    #    summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
    #    reportDirectory: '$(Build.SourcesDirectory)/htmlcov'
    #    testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    #  condition: succeededOrFailed()

    - bash: |
        set -e
        FILES="*.py"
        for fn in $FILES
        do
          echo "Processing $fn example..."
          python $fn
        done
      workingDirectory: examples
      displayName: 'Examples'

    - bash: |
        pip install -q -r requirements/integrate.txt
        pip list
      displayName: 'Install integrations'

    - bash: python -m pytest integrations -v --durations=25
      env:
        PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: 'python'
      workingDirectory: tests
      displayName: 'Test integrations'

[build-system]
requires = [
    "setuptools",
    "wheel",
]

[tool.black]
# https://github.com/psf/black
line-length = 120
exclude = "(.eggs|.git|.hg|.mypy_cache|.venv|_build|buck-out|build|dist)"

[tool.isort]
known_first_party = [
    "torchmetrics",
    "integrations",
    "unittests",
    "integrations",
]
skip_glob = []
profile = "black"
line_length = 120

[tool.autopep8]
ignore = ["E731"]

[tool.mypy]
files = [
    "src/torchmetrics",
]
install_types = "True"
non_interactive = "True"
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
show_error_codes = "True"
warn_redundant_casts = "True"
warn_unused_configs = "True"
warn_unused_ignores = "True"
allow_redefinition = "True"
# disable this rule as the Trainer attributes are defined in the connectors, not in its __init__
disable_error_code = "attr-defined"
# style choices
warn_no_return = "False"

# Ignore mypy errors for these files
# TODO: the goal is for this to be empty
[[tool.mypy.overrides]]
# the list can be generated with:
# mypy --no-error-summary 2>&1 | tr ':' ' ' | awk '{print $1}' | sort | uniq | sed 's/\.py//g; s|src/||g;  s|\/|\.|g' | xargs -I {} echo '"{}",'
module = [
    "torchmetrics.aggregation",
    "torchmetrics.classification.accuracy",
    "torchmetrics.classification.auroc",
    "torchmetrics.classification.average_precision",
    "torchmetrics.classification.binned_precision_recall",
    "torchmetrics.classification.calibration_error",
    "torchmetrics.classification.cohen_kappa",
    "torchmetrics.classification.confusion_matrix",
    "torchmetrics.classification.exact_match",
    "torchmetrics.classification.f_beta",
    "torchmetrics.classification.hamming",
    "torchmetrics.classification.hinge",
    "torchmetrics.classification.jaccard",
    "torchmetrics.classification.matthews_corrcoef",
    "torchmetrics.classification.precision_recall_curve",
    "torchmetrics.classification.precision_recall",
    "torchmetrics.classification.ranking",
    "torchmetrics.classification.recall_at_fixed_precision",
    "torchmetrics.classification.roc",
    "torchmetrics.classification.specificity",
    "torchmetrics.classification.stat_scores",
    "torchmetrics.collections",
    "torchmetrics.detection.mean_ap",
    "torchmetrics.functional.audio.pit",
    "torchmetrics.functional.classification.auroc",
    "torchmetrics.functional.classification.average_precision",
    "torchmetrics.functional.classification.calibration_error",
    "torchmetrics.functional.classification.confusion_matrix",
    "torchmetrics.functional.classification.f_beta",
    "torchmetrics.functional.classification.precision_recall_curve",
    "torchmetrics.functional.classification.ranking",
    "torchmetrics.functional.classification.recall_at_fixed_precision",
    "torchmetrics.functional.classification.roc",
    "torchmetrics.functional.classification.stat_scores",
    "torchmetrics.functional.image.helper",
    "torchmetrics.functional.image.psnr",
    "torchmetrics.functional.image.ssim",
    "torchmetrics.functional.image.uqi",
    "torchmetrics.functional.regression.cosine_similarity",
    "torchmetrics.functional.regression.explained_variance",
    "torchmetrics.functional.regression.kl_divergence",
    "torchmetrics.functional.regression.r2",
    "torchmetrics.functional.regression.wmape",
    "torchmetrics.functional.retrieval.r_precision",
    "torchmetrics.functional.text.squad",
    "torchmetrics.image.fid",
    "torchmetrics.image.inception",
    "torchmetrics.image.lpip",
    "torchmetrics.image.psnr",
    "torchmetrics.image.ssim",
    "torchmetrics.image.tv",
    "torchmetrics.image.uqi",
    "torchmetrics.metric",
    "torchmetrics.regression.kl_divergence",
    "torchmetrics.regression.log_mse",
    "torchmetrics.regression.mae",
    "torchmetrics.regression.mape",
    "torchmetrics.regression.mse",
    "torchmetrics.regression.symmetric_mape",
    "torchmetrics.retrieval.precision_recall_curve",
    "torchmetrics.text.cer",
    "torchmetrics.text.mer",
    "torchmetrics.text.wer",
    "torchmetrics.utilities.checks",
    "torchmetrics.utilities.data",
    "torchmetrics.wrappers.tracker",
]
ignore_errors = "True"
